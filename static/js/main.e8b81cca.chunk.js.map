{"version":3,"sources":["contexts/WrapperContext/styles.ts","contexts/WrapperContext/index.tsx","hooks/useSectionScroll.ts","hooks/useWrapperScroll.ts","components/Section/styles.ts","components/Section/index.tsx","sections/Section01/style.ts","sections/Section01/index.tsx","sections/Section02/style.ts","sections/Section02/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","Sticky","Content","WrapperContext","React","createContext","Wrapper","children","ref","useRef","useState","sections","setSections","registerSection","useCallback","section","Provider","value","wrapperRef","map","key","content","useSectionSroll","scrollY","useContext","useMotionValue","scrollYProgress","useEffect","current","updateScrollValue","scrollTop","fullScroll","scrollHeight","offsetHeight","set","addEventListener","removeEventListener","useWrapperScroll","getSectionDimensions","offsetTop","dimensions","setDimensions","useLayoutEffect","onResize","window","requestAnimationFrame","useTransform","y","Section","scrollProgress","useSectionScroll","Title","h1","Section01","opacity","top","motion","style","height","width","backgroundColor","display","alignItems","justifyContent","position","transition","Section02","bottom","App","scroll","v","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8b81cca.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  scroll-snap-type: y mandatory;\r\n  scroll-behavior: smooth;\r\n  overflow-y: scroll;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const Sticky = styled.div`\r\n  position: sticky;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  height: 100vh;\r\n  margin-top: -100vh;\r\n  position: sticky;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n`","import React, { useCallback, useRef, useState } from \"react\";\r\nimport { Container, Content, Sticky } from './styles';\r\n\r\ninterface Section {\r\n  content: React.ReactNode;\r\n}\r\n\r\ninterface WrapperContext {\r\n  wrapperRef: React.RefObject<HTMLElement>;\r\n  sections: Section[];\r\n  registerSection: (section: Section) => void;\r\n}\r\n\r\nconst WrapperContext = React.createContext<WrapperContext>({} as WrapperContext);\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\n\r\nexport function Wrapper({ children }: Props): JSX.Element {\r\n  const ref = useRef<HTMLDivElement>({} as HTMLDivElement);\r\n  const [sections, setSections] = useState<Section[]>([])\r\n  const registerSection = useCallback((section: Section) =>\r\n    setSections(sections => [...sections, section])\r\n    , []);\r\n\r\n  return (\r\n    <WrapperContext.Provider value={{ wrapperRef: ref, sections, registerSection }}>\r\n      <Container ref={ref}>\r\n        <Sticky>\r\n          {sections.map((section, key) => <Content key={key}>{section.content}</Content>)}\r\n        </Sticky>\r\n        {children}\r\n      </Container>\r\n    </WrapperContext.Provider>\r\n  )\r\n}\r\n\r\n\r\nexport default WrapperContext;","import { useTransform } from \"framer-motion\";\r\nimport { RefObject, useCallback, useEffect, useLayoutEffect, useState } from \"react\";\r\nimport useWrapperScroll from '../hooks/useWrapperScroll';\r\n\r\ntype SectionDimensions = Pick<HTMLDivElement, 'offsetTop' | 'offsetHeight'>\r\n\r\nexport default function useSectionSroll(ref: RefObject<HTMLDivElement>) {\r\n  const { scrollY, } = useWrapperScroll();\r\n\r\n  const getSectionDimensions = useCallback(() => {\r\n    return {\r\n      offsetTop: ref.current?.offsetTop ?? 0,\r\n      offsetHeight: ref.current?.offsetHeight ?? 0\r\n    } as SectionDimensions\r\n  }, [ref])\r\n\r\n  const [dimensions, setDimensions] = useState<SectionDimensions>(\r\n    getSectionDimensions()\r\n  )\r\n\r\n  useEffect(() => {\r\n    setDimensions(getSectionDimensions());\r\n  }, [getSectionDimensions])\r\n\r\n  useLayoutEffect(() => {\r\n    function onResize() {\r\n      window.requestAnimationFrame(() => setDimensions(getSectionDimensions()))\r\n    }\r\n\r\n    window.addEventListener('resize', onResize)\r\n\r\n    return () => window.removeEventListener('resize', onResize)\r\n  }, [getSectionDimensions, ref])\r\n\r\n  return useTransform(\r\n    scrollY,\r\n    y => (y - dimensions.offsetTop) / dimensions.offsetHeight\r\n  )\r\n}","import { useContext, useEffect } from 'react'\r\nimport { useMotionValue } from 'framer-motion'\r\nimport WrapperContext from '../contexts/WrapperContext'\r\n\r\n\r\nexport default function useWrapperScroll() {\r\n  const { wrapperRef } = useContext(WrapperContext)\r\n\r\n  const scrollY = useMotionValue(0)\r\n  const scrollYProgress = useMotionValue(0)\r\n\r\n  useEffect(() => {\r\n    if (wrapperRef.current) {\r\n      const updateScrollValue = () => {\r\n        if (wrapperRef.current) {\r\n          const { scrollTop, scrollHeight, offsetHeight } = wrapperRef.current\r\n\r\n          const fullScroll = scrollHeight - offsetHeight\r\n\r\n          scrollY.set(scrollTop)\r\n          scrollYProgress.set(scrollTop / fullScroll)\r\n        }\r\n      }\r\n\r\n      wrapperRef.current.addEventListener('scroll', updateScrollValue)\r\n\r\n      return () =>\r\n        wrapperRef?.current?.removeEventListener('scroll', updateScrollValue)\r\n    }\r\n    else {\r\n      scrollY.set(0);\r\n      scrollYProgress.set(0);\r\n    }\r\n  }, [wrapperRef, scrollY, scrollYProgress])\r\n\r\n  return { scrollY, scrollYProgress }\r\n}","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  height: 100vh;\r\n  width: 100%;\r\n  scroll-snap-align: center;\r\n  :nth-child(even){\r\n    background-color: #ddd;\r\n  }\r\n`;","import { MotionValue } from 'framer-motion';\r\nimport React, { useContext, useEffect, useRef } from 'react';\r\nimport WrapperContext from '../../contexts/WrapperContext';\r\nimport useSectionScroll from '../../hooks/useSectionScroll';\r\nimport { Container, } from './styles';\r\n\r\ninterface Props {\r\n  content: (scroolY: MotionValue) => React.ReactNode;\r\n}\r\n\r\nexport default function Section({ content }: Props): JSX.Element {\r\n  const ref = useRef<HTMLDivElement>({} as HTMLDivElement);\r\n  const scrollProgress = useSectionScroll(ref);\r\n\r\n  const { registerSection } = useContext(WrapperContext);\r\n\r\n  useEffect(() => {\r\n    registerSection({ content: content(scrollProgress) });\r\n  }, [content,  registerSection, scrollProgress]);\r\n\r\n  return (\r\n    <Container ref={ref} />\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n    color: #ffffff\r\n`;","import { motion, MotionValue, useTransform } from \"framer-motion\";\r\nimport React from 'react';\r\nimport { Title } from './style';\r\n\r\ninterface Props {\r\n  scrollYProgress: MotionValue;\r\n}\r\n\r\nexport default function Section01({ scrollYProgress }: Props): JSX.Element {\r\n\r\n  const opacity = useTransform(scrollYProgress, [0, 0.9, 1,], [1, 0.8, 0]);\r\n  opacity.set(1)\r\n  const top =  useTransform(scrollYProgress, [0, 0.85, 1,],['0vh', '0vh','100vh'],);\r\n  top.set('0');\r\n  return (\r\n    <motion.div style={{ opacity, height: '100vh', width: '100%', backgroundColor: '#343434', display: 'flex' }} >\r\n      <motion.div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%', top, position: 'fixed', height: '100%', transition: 'all 0.3s' }}>\r\n        <Title >Olá! Bem vindo ao meu portfólio!</Title>\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n    color: #343434\r\n`;","import { motion, MotionValue, useTransform } from \"framer-motion\";\r\nimport React from 'react';\r\nimport { Title } from './style';\r\n\r\ninterface Props {\r\n  scrollYProgress: MotionValue;\r\n}\r\n\r\nexport default function Section02({ scrollYProgress }: Props): JSX.Element {\r\n\r\n  const opacity = useTransform(scrollYProgress, [-0.1 ,0, 0.9, 1,], [0,1, 0.8, 0]);\r\n  opacity.set(0)\r\n  const bottom =  useTransform(scrollYProgress, [0, 0.85, 1,],['0vh', '0vh','100vh'],);\r\n  return (\r\n    <motion.div style={{ opacity, height: '100vh', width: '100%', backgroundColor: '#FFF', display: 'flex' }} >\r\n      <motion.div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%', bottom, position: 'fixed', height: '100%'}}>\r\n        <Title >Esta página esta em construção!</Title>\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n","import React from 'react';\nimport { Wrapper } from \"./contexts/WrapperContext\";\nimport Section from './components/Section';\nimport Section01 from './sections/Section01';\nimport Section02 from './sections/Section02';\nfunction App() {\n\n  return (\n    <Wrapper>\n      <div>\n        <Section content={(scroll) => <Section01 scrollYProgress={scroll} />} />\n        <Section content={(scroll) => <Section02 scrollYProgress={scroll} />  } />\n\n        <Section content={(v) =>\n          <div></div>\n        } />\n        <Section content={(v) =>\n          <div></div>\n        } />\n        <Section content={(v) =>\n          <div></div>\n        } />\n      </div>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}